#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from std_msgs.msg import Int32
from geometry_msgs.msg import Twist
from Ax12 import Ax12
import time

class AX12Controller(Node):
    def __init__(self):
        super().__init__('ax12_controller')
        self.publisher_ = self.create_publisher(Int32, 'direction_position', 10)
        self.subscription = self.create_subscription(
            Twist,
            'cmd_vel',
            self.cmd_vel_callback,
            10
        )

        Ax12.DEVICENAME = '/dev/ttyUSB0'
        Ax12.BAUDRATE = 1_000_000
        Ax12.connect()
        self.motor = Ax12(1)
        self.motor.set_moving_speed(300)

        self.last_msg = time.time()

        # Timer to publish motor position
        self.timer_direction = self.create_timer(0.1, self.publish_position)  # Publish every 100ms
        self.timer_AR = self.create_timer(0.1, self.AR)

    def AR(self):
        if (time.time() - self.last_msg > 0.5):
            msg_AR = Twist()
            msg_AR.linear.x = 0.0
            msg_AR.angular.z = 0.0
            self.cmd_vel_callback(msg_AR)
            print("ARRET D'URGENCE")

    def publish_position(self):
        position = self.motor.get_present_position()
        msg = Int32()
        msg.data = position
        self.publisher_.publish(msg)
        self.get_logger().info('Publishing motor position: %d' % position)

    def __del__(self):
        Ax12.set_torque_enable(0)
        Ax12.disconnect()

    def cmd_vel_callback(self, msg):
        self.last_msg = time.time()
        self.motor.set_goal_position(int((-msg.angular.z+3+2.2-0.05)*100))
        self.get_logger().info('Setting goal position to: %d' % int((-msg.angular.z+3+2.2-0.05)*100))

def main(args=None):
    rclpy.init(args=args)
    ax12_controller = AX12Controller()
    rclpy.spin(ax12_controller)
    ax12_controller.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
